#include <PZEM004Tv30.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <vector>
#include <algorithm>
#include <time.h>

// WiFi credentials
const char* ssid1 = "TECNO SPARK 7Q";
const char* password1 = "38533853";
const char* ssid2 = "RS Lab Wifi";
const char* password2 = "rslab@wifi";

// NTP Server settings
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 0;   // GMT offset in seconds (0 for UTC)
const int daylightOffset_sec = 0; // Daylight offset in seconds

// PZEM Serial pins
#define PZEM_RX_PIN 16
#define PZEM_TX_PIN 17

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Initialize PZEM sensor
PZEM004Tv30 pzem(Serial2, PZEM_RX_PIN, PZEM_TX_PIN);

// Data storage configuration
struct DataPoint {
  unsigned long timestamp; // Unix timestamp in seconds
  float voltage;
  float current;
  float power;
  float energy;
  float frequency;
  float pf;
};

// Reduced buffer sizes for stability
const size_t MAX_RAW_POINTS = 600;      // 20 minutes at 2s intervals
const size_t MAX_MINUTE_POINTS = 1440;  // 24 hours
const size_t MAX_HOUR_POINTS = 168;     // 1 week
const size_t MAX_OFFLINE_POINTS = 300;  // 10 minutes offline storage

std::vector<DataPoint> rawData;
std::vector<DataPoint> minuteData;
std::vector<DataPoint> hourData;
std::vector<DataPoint> offlineBuffer;

// Timing variables
unsigned long lastMinuteAggregation = 0;
unsigned long lastHourAggregation = 0;
unsigned long lastWifiAttempt = 0;
const unsigned long minuteInterval = 60000;     // 60 seconds
const unsigned long hourInterval = 3600000;     // 3600 seconds
const unsigned long wifiRetryInterval = 30000;  // 30 seconds

// WiFi management
bool isConnected = false;
int currentNetwork = 0;
const int maxNetworks = 2;
const char* ssids[maxNetworks] = {ssid1, ssid2};
const char* passwords[maxNetworks] = {password1, password2};

// Current sensor readings (atomic updates)
volatile float voltage = 0;
volatile float current = 0;
volatile float power = 0;
volatile float energy = 0;
volatile float frequency = 0;
volatile float pf = 0;

// HTML and JavaScript with CSV download button
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>ESP32 Power Monitor</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    html {
      scroll-behavior: smooth;
    }
    body { 
      font-family: Arial, sans-serif; 
      margin: 0;
      padding: 20px;
      background-color: #f0f0f0;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }
    .card {
      background: white;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      text-align: left;
    }
    .wifi-status {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: bold;
      z-index: 1000;
    }
    .wifi-connected {
      background: #2ecc71;
      color: white;
    }
    .wifi-disconnected {
      background: #e74c3c;
      color: white;
    }
    .icon {
      font-size: 40px;
      margin-right: 25px;
      min-width: 50px;
      text-align: center;
    }
    .content {
      display: flex;
      flex-direction: column;
    }
    .label {
      font-size: 16px;
      color: #7f8c8d;
      margin-bottom: 5px;
      font-weight: bold;
    }
    .value {
      font-size: 24px;
      color: #2c3e50;
      display: flex;
      align-items: baseline;
    }
    .unit {
      font-size: 16px;
      color: #95a5a6;
      margin-left: 5px;
    }
    .fa-bolt { color: #f1c40f; }
    .fa-exchange-alt { color: #3498db; }
    .fa-plug { color: #e74c3c; }
    .fa-chart-line { color: #2ecc71; }
    .fa-wave-square { color: #9b59b6; }
    .fa-percent { color: #e67e22; }
    h1 {
      text-align: center;
      margin: 30px 0;
      color: #2c3e50;
    }
    .chart-container {
      background: white;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      margin: 20px auto;
      max-width: 1200px;
    }
    .chart-title {
      font-size: 18px;
      color: #2c3e50;
      margin-bottom: 15px;
      font-weight: bold;
      text-align: center;
    }
    .time-toggle {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
      gap: 10px;
    }
    .time-toggle button {
      padding: 8px 16px;
      border: none;
      border-radius: 20px;
      background: #e0e0e0;
      color: #555;
      cursor: pointer;
      font-weight: bold;
      transition: all 0.3s;
    }
    .time-toggle button.active {
      background: #3498db;
      color: white;
    }
    .chart-row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: center;
    }
    .chart-wrapper {
      flex: 1 1 500px;
      min-width: 300px;
    }
    #toTopBtn {
      display: none;
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 99;
      border: none;
      outline: none;
      background-color: #3498db;
      color: white;
      cursor: pointer;
      padding: 15px;
      border-radius: 50%;
      font-size: 18px;
      transition: all 0.3s;
    }
    #toTopBtn:hover {
      background-color: #2980b9;
    }
    .download-btn {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      background-color: #2ecc71;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      transition: all 0.3s;
    }
    .download-btn:hover {
      background-color: #27ae60;
    }
  </style>
  <script>
    let voltageChart, currentChart, powerChart, energyChart, frequencyChart, pfChart;
    let currentView = 'raw'; // 'raw', 'minute', or 'hour'
    
    function formatTime(timestamp) {
      const date = new Date(timestamp * 1000);
      return date.toLocaleString();
    }
    
    function updateCharts(data) {
      if (!data || data.length === 0) return;
      
      // Prepare labels
      const labels = data.map(item => formatTime(item.timestamp));
      
      // Update or create charts
      updateChart('voltageChart', labels, data.map(item => item.voltage), 'Voltage (V)', '#f1c40f');
      updateChart('currentChart', labels, data.map(item => item.current), 'Current (A)', '#3498db');
      updateChart('powerChart', labels, data.map(item => item.power), 'Power (W)', '#e74c3c');
      updateChart('energyChart', labels, data.map(item => item.energy), 'Energy (kWh)', '#2ecc71');
      updateChart('frequencyChart', labels, data.map(item => item.frequency), 'Frequency (Hz)', '#9b59b6');
      updateChart('pfChart', labels, data.map(item => item.pf), 'Power Factor', '#e67e22');
    }
    
    function updateChart(canvasId, labels, values, label, color) {
      const ctx = document.getElementById(canvasId).getContext('2d');
      let chart;
      
      switch(canvasId) {
        case 'voltageChart': chart = voltageChart; break;
        case 'currentChart': chart = currentChart; break;
        case 'powerChart': chart = powerChart; break;
        case 'energyChart': chart = energyChart; break;
        case 'frequencyChart': chart = frequencyChart; break;
        case 'pfChart': chart = pfChart; break;
      }
      
      if (chart) {
        chart.data.labels = labels;
        chart.data.datasets[0].data = values;
        chart.update();
      } else {
        const newChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: label,
              data: values,
              borderColor: color,
              backgroundColor: color + '20',
              borderWidth: 2,
              fill: true,
              tension: 0.1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: canvasId !== 'energyChart',
                title: { display: true, text: label }
              },
              x: {
                title: { display: true, text: 'Time' }
              }
            }
          }
        });
        
        switch(canvasId) {
          case 'voltageChart': voltageChart = newChart; break;
          case 'currentChart': currentChart = newChart; break;
          case 'powerChart': powerChart = newChart; break;
          case 'energyChart': energyChart = newChart; break;
          case 'frequencyChart': frequencyChart = newChart; break;
          case 'pfChart': pfChart = newChart; break;
        }
      }
    }
    
    function updateLiveData(data) {
      if (!data) return;
      
      document.getElementById('voltage').innerHTML = data.voltage.toFixed(1) + '<span class="unit">V</span>';
      document.getElementById('current').innerHTML = data.current.toFixed(2) + '<span class="unit">A</span>';
      document.getElementById('power').innerHTML = data.power.toFixed(1) + '<span class="unit">W</span>';
      document.getElementById('energy').innerHTML = data.energy.toFixed(3) + '<span class="unit">kWh</span>';
      document.getElementById('frequency').innerHTML = data.frequency.toFixed(1) + '<span class="unit">Hz</span>';
      document.getElementById('pf').innerHTML = data.pf.toFixed(2);
      
      const statusElement = document.getElementById('wifiStatus');
      if (data.connected) {
        statusElement.className = 'wifi-status wifi-connected';
        statusElement.innerHTML = '<i class="fas fa-wifi"></i> Connected';
      } else {
        statusElement.className = 'wifi-status wifi-disconnected';
        statusElement.innerHTML = '<i class="fas fa-wifi-slash"></i> Disconnected';
      }
    }
    
    function fetchLiveData() {
      fetch('/live')
        .then(response => response.json())
        .then(data => updateLiveData({
          voltage: data.voltage || 0,
          current: data.current || 0,
          power: data.power || 0,
          energy: data.energy || 0,
          frequency: data.frequency || 0,
          pf: data.pf || 0,
          connected: true
        }))
        .catch(err => {
          console.error('Error fetching live data:', err);
          updateLiveData({ connected: false });
        });
    }
    
    function fetchChartData() {
      fetch('/chart?view=' + currentView)
        .then(response => response.json())
        .then(data => updateCharts(data))
        .catch(err => console.error('Error fetching chart data:', err));
    }
    
    function setView(view) {
      currentView = view;
      document.querySelectorAll('.time-toggle button').forEach(btn => {
        btn.classList.toggle('active', btn.id === view + 'Btn');
      });
      fetchChartData();
    }
    
    function downloadCSV() {
      fetch('/csv?view=' + currentView)
        .then(response => response.text())
        .then(csvData => {
          const blob = new Blob([csvData], { type: 'text/csv' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.setAttribute('hidden', '');
          a.setAttribute('href', url);
          a.setAttribute('download', 'power_data_' + currentView + '.csv');
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
        })
        .catch(err => console.error('Error downloading CSV:', err));
    }
    
    // Scroll to top button
    window.onscroll = function() {
      const btn = document.getElementById('toTopBtn');
      btn.style.display = (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) ? 'block' : 'none';
    };
    
    function scrollToTop() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    // Initialize
    window.onload = function() {
      setView('raw');
      setInterval(fetchLiveData, 2000);
      setInterval(fetchChartData, 5000);
      fetchLiveData();
    };
  </script>
</head>
<body>
  <div id="wifiStatus" class="wifi-status wifi-connected">
    <i class="fas fa-wifi"></i> Connected
  </div>
  
  <h1><i class="fas fa-plug"></i> IEQ Project Energy Monitor Dashboard</h1>
  <div class="grid">
    <div class="card">
      <i class="fas fa-bolt icon"></i>
      <div class="content">
        <div class="label">VOLTAGE</div>
        <div class="value" id="voltage">0.0<span class="unit">V</span></div>
      </div>
    </div>
    <div class="card">
      <i class="fas fa-exchange-alt icon"></i>
      <div class="content">
        <div class="label">CURRENT</div>
        <div class="value" id="current">0.00<span class="unit">A</span></div>
      </div>
    </div>
    <div class="card">
      <i class="fas fa-plug icon"></i>
      <div class="content">
        <div class="label">POWER</div>
        <div class="value" id="power">0.0<span class="unit">W</span></div>
      </div>
    </div>
    <div class="card">
      <i class="fas fa-chart-line icon"></i>
      <div class="content">
        <div class="label">ENERGY</div>
        <div class="value" id="energy">0.000<span class="unit">kWh</span></div>
      </div>
    </div>
    <div class="card">
      <i class="fas fa-wave-square icon"></i>
      <div class="content">
        <div class="label">FREQUENCY</div>
        <div class="value" id="frequency">0.0<span class="unit">Hz</span></div>
      </div>
    </div>
    <div class="card">
      <i class="fas fa-percent icon"></i>
      <div class="content">
        <div class="label">POWER FACTOR</div>
        <div class="value" id="pf">0.00</div>
      </div>
    </div>
  </div>
  
  <div class="chart-container">
    <div class="chart-title">Energy Monitoring Charts</div>
    <div class="time-toggle">
      <button id="rawBtn" onclick="setView('raw')">Raw Data (2s)</button>
      <button id="minuteBtn" onclick="setView('minute')">Minute Aggregates</button>
      <button id="hourBtn" onclick="setView('hour')">Hour Aggregates</button>
    </div>
    
    <button class="download-btn" onclick="downloadCSV()">
      <i class="fas fa-download"></i> Download Data as CSV
    </button>
    
    <div class="chart-row">
      <div class="chart-wrapper">
        <canvas id="voltageChart" height="250"></canvas>
      </div>
      <div class="chart-wrapper">
        <canvas id="currentChart" height="250"></canvas>
      </div>
    </div>
    
    <div class="chart-row">
      <div class="chart-wrapper">
        <canvas id="powerChart" height="250"></canvas>
      </div>
      <div class="chart-wrapper">
        <canvas id="energyChart" height="250"></canvas>
      </div>
    </div>
    
    <div class="chart-row">
      <div class="chart-wrapper">
        <canvas id="frequencyChart" height="250"></canvas>
      </div>
      <div class="chart-wrapper">
        <canvas id="pfChart" height="250"></canvas>
      </div>
    </div>
  </div>
  
  <button onclick="scrollToTop()" id="toTopBtn" title="Go to top"><i class="fas fa-arrow-up"></i></button>
</body>
</html>
)rawliteral";

String processor(const String& var) {
  if(var == "VOLTAGE") return String(voltage, 1);
  else if(var == "CURRENT") return String(current, 2);
  else if(var == "POWER") return String(power, 1);
  else if(var == "ENERGY") return String(energy, 3);
  else if(var == "FREQUENCY") return String(frequency, 1);
  else if(var == "PF") return String(pf, 2);
  return String();
}

void addDataPoint(std::vector<DataPoint>& buffer, const DataPoint& point, size_t maxSize) {
  if (buffer.size() >= maxSize) {
    buffer.erase(buffer.begin());
  }
  buffer.push_back(point);
}

void connectToWiFi() {
  if (WiFi.status() == WL_CONNECTED) {
    isConnected = true;
    return;
  }

  Serial.printf("Attempting to connect to: %s\n", ssids[currentNetwork]);
  WiFi.begin(ssids[currentNetwork], passwords[currentNetwork]);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 10) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    isConnected = true;
    Serial.printf("\nConnected to %s\n", ssids[currentNetwork]);
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    
    // Configure NTP time once connected
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    Serial.println("Waiting for NTP time sync...");
    time_t now;
    int retries = 0;
    while ((now = time(nullptr)) < 24 * 3600 && retries < 10) {
      Serial.print(".");
      delay(1000);
      retries++;
    }
    if (now >= 24 * 3600) {
      Serial.println("\nNTP time synchronized");
    } else {
      Serial.println("\nFailed to get NTP time");
    }
  } else {
    isConnected = false;
    Serial.println("\nConnection failed, trying next network...");
    currentNetwork = (currentNetwork + 1) % maxNetworks;
  }
}

unsigned long getCurrentTimestamp() {
  time_t now;
  time(&now);
  return now;
}

void aggregateData() {
  unsigned long now = getCurrentTimestamp() * 1000; // Convert to milliseconds for comparison

  // Minute aggregation
  if (now - lastMinuteAggregation >= minuteInterval && !rawData.empty()) {
    lastMinuteAggregation = now;
    
    DataPoint avg;
    avg.timestamp = now / 1000; // Store as Unix timestamp in seconds
    int count = 0;
    unsigned long cutoff = now - minuteInterval;

    for (auto it = rawData.rbegin(); it != rawData.rend() && (it->timestamp * 1000) >= cutoff; ++it) {
      avg.voltage += it->voltage;
      avg.current += it->current;
      avg.power += it->power;
      avg.energy += it->energy;
      avg.frequency += it->frequency;
      avg.pf += it->pf;
      count++;
    }

    if (count > 0) {
      avg.voltage /= count;
      avg.current /= count;
      avg.power /= count;
      avg.energy /= count;
      avg.frequency /= count;
      avg.pf /= count;
      addDataPoint(minuteData, avg, MAX_MINUTE_POINTS);
    }
  }

  // Hour aggregation
  if (now - lastHourAggregation >= hourInterval && !minuteData.empty()) {
    lastHourAggregation = now;
    
    DataPoint avg;
    avg.timestamp = now / 1000; // Store as Unix timestamp in seconds
    int count = 0;
    unsigned long cutoff = now - hourInterval;

    for (auto it = minuteData.rbegin(); it != minuteData.rend() && (it->timestamp * 1000) >= cutoff; ++it) {
      avg.voltage += it->voltage;
      avg.current += it->current;
      avg.power += it->power;
      avg.energy += it->energy;
      avg.frequency += it->frequency;
      avg.pf += it->pf;
      count++;
    }

    if (count > 0) {
      avg.voltage /= count;
      avg.current /= count;
      avg.power /= count;
      avg.energy /= count;
      avg.frequency /= count;
      avg.pf /= count;
      addDataPoint(hourData, avg, MAX_HOUR_POINTS);
    }
  }
}

String getChartData(const String& view) {
  const std::vector<DataPoint>* data = &rawData;
  if (view == "minute") data = &minuteData;
  else if (view == "hour") data = &hourData;

  String json = "[";
  for (size_t i = 0; i < data->size(); i++) {
    if (i > 0) json += ",";
    json += "{";
    json += "\"timestamp\":" + String((*data)[i].timestamp) + ",";
    json += "\"voltage\":" + String((*data)[i].voltage, 1) + ",";
    json += "\"current\":" + String((*data)[i].current, 2) + ",";
    json += "\"power\":" + String((*data)[i].power, 1) + ",";
    json += "\"energy\":" + String((*data)[i].energy, 3) + ",";
    json += "\"frequency\":" + String((*data)[i].frequency, 1) + ",";
    json += "\"pf\":" + String((*data)[i].pf, 2);
    json += "}";
  }
  json += "]";
  return json;
}

String getCSVData(const String& view) {
  const std::vector<DataPoint>* data = &rawData;
  if (view == "minute") data = &minuteData;
  else if (view == "hour") data = &hourData;

  String csv = "Timestamp,Voltage (V),Current (A),Power (W),Energy (kWh),Frequency (Hz),Power Factor\n";
  
  for (size_t i = 0; i < data->size(); i++) {
    time_t timestamp = (*data)[i].timestamp;
    struct tm *timeinfo;
    timeinfo = localtime(&timestamp);
    char timeString[20];
    strftime(timeString, sizeof(timeString), "%Y-%m-%d %H:%M:%S", timeinfo);
    
    csv += String(timeString) + ",";
    csv += String((*data)[i].voltage, 1) + ",";
    csv += String((*data)[i].current, 2) + ",";
    csv += String((*data)[i].power, 1) + ",";
    csv += String((*data)[i].energy, 3) + ",";
    csv += String((*data)[i].frequency, 1) + ",";
    csv += String((*data)[i].pf, 2) + "\n";
  }
  
  return csv;
}

void setup() {
  Serial.begin(115200);
  delay(1000); // Stabilization delay

  // Connect to WiFi
  connectToWiFi();

  // Routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  server.on("/live", HTTP_GET, [](AsyncWebServerRequest *request){
    String json = "{";
    json += "\"voltage\":" + String(voltage, 1) + ",";
    json += "\"current\":" + String(current, 2) + ",";
    json += "\"power\":" + String(power, 1) + ",";
    json += "\"energy\":" + String(energy, 3) + ",";
    json += "\"frequency\":" + String(frequency, 1) + ",";
    json += "\"pf\":" + String(pf, 2);
    json += "}";
    request->send(200, "application/json", json);
  });

  server.on("/chart", HTTP_GET, [](AsyncWebServerRequest *request){
    String view = request->hasParam("view") ? request->getParam("view")->value() : "raw";
    request->send(200, "application/json", getChartData(view));
  });

  server.on("/csv", HTTP_GET, [](AsyncWebServerRequest *request){
    String view = request->hasParam("view") ? request->getParam("view")->value() : "raw";
    request->send(200, "text/csv", getCSVData(view));
  });

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  static unsigned long lastRead = 0;
  static unsigned long lastWifiCheck = 0;
  static unsigned long lastHeapPrint = 0;
  unsigned long now = millis();

  // Read sensors every 2 seconds
  if (now - lastRead >= 2000) {
    lastRead = now;
    
    voltage = pzem.voltage();
    current = pzem.current();
    power = pzem.power();
    energy = pzem.energy();
    frequency = pzem.frequency();
    pf = pzem.pf();

    DataPoint newPoint = {
      .timestamp = getCurrentTimestamp(),
      .voltage = voltage,
      .current = current,
      .power = power,
      .energy = energy,
      .frequency = frequency,
      .pf = pf
    };

    if (isConnected) {
      addDataPoint(rawData, newPoint, MAX_RAW_POINTS);
      if (!offlineBuffer.empty()) {
        Serial.println("Flushing offline buffer...");
        for (const auto& point : offlineBuffer) {
          addDataPoint(rawData, point, MAX_RAW_POINTS);
        }
        offlineBuffer.clear();
      }
    } else {
      addDataPoint(offlineBuffer, newPoint, MAX_OFFLINE_POINTS);
    }

    aggregateData();
  }

  // Check WiFi periodically
  if (now - lastWifiCheck >= wifiRetryInterval) {
    lastWifiCheck = now;
    if (WiFi.status() != WL_CONNECTED) {
      isConnected = false;
      connectToWiFi();
    }
  }

  // Memory monitoring
  if (now - lastHeapPrint >= 10000) {
    lastHeapPrint = now;
    Serial.printf("Free Heap: %u bytes\n", ESP.getFreeHeap());
    Serial.printf("Data counts: Raw=%d Minute=%d Hour=%d Offline=%d\n",
                 rawData.size(), minuteData.size(), hourData.size(), offlineBuffer.size());
  }
}
